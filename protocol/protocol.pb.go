// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/protocol.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Tag                  uint32   `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_87968d26f3046c60, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Announcement struct {
	Routes               []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Announcement) Reset()         { *m = Announcement{} }
func (m *Announcement) String() string { return proto.CompactTextString(m) }
func (*Announcement) ProtoMessage()    {}
func (*Announcement) Descriptor() ([]byte, []int) {
	return fileDescriptor_87968d26f3046c60, []int{1}
}

func (m *Announcement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Announcement.Unmarshal(m, b)
}
func (m *Announcement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Announcement.Marshal(b, m, deterministic)
}
func (m *Announcement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Announcement.Merge(m, src)
}
func (m *Announcement) XXX_Size() int {
	return xxx_messageInfo_Announcement.Size(m)
}
func (m *Announcement) XXX_DiscardUnknown() {
	xxx_messageInfo_Announcement.DiscardUnknown(m)
}

var xxx_messageInfo_Announcement proto.InternalMessageInfo

func (m *Announcement) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type Route struct {
	Prefix               []byte   `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength         uint32   `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Path                 []*Hop   `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_87968d26f3046c60, []int{2}
}

func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *Route) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *Route) GetPath() []*Hop {
	if m != nil {
		return m.Path
	}
	return nil
}

type Hop struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Latency              uint32   `protobuf:"varint,2,opt,name=latency,proto3" json:"latency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hop) Reset()         { *m = Hop{} }
func (m *Hop) String() string { return proto.CompactTextString(m) }
func (*Hop) ProtoMessage()    {}
func (*Hop) Descriptor() ([]byte, []int) {
	return fileDescriptor_87968d26f3046c60, []int{3}
}

func (m *Hop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hop.Unmarshal(m, b)
}
func (m *Hop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hop.Marshal(b, m, deterministic)
}
func (m *Hop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hop.Merge(m, src)
}
func (m *Hop) XXX_Size() int {
	return xxx_messageInfo_Hop.Size(m)
}
func (m *Hop) XXX_DiscardUnknown() {
	xxx_messageInfo_Hop.DiscardUnknown(m)
}

var xxx_messageInfo_Hop proto.InternalMessageInfo

func (m *Hop) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Hop) GetLatency() uint32 {
	if m != nil {
		return m.Latency
	}
	return 0
}

type DistributedConfig struct {
	Version              uint32   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Certificate          []byte   `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Content              []byte   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedConfig) Reset()         { *m = DistributedConfig{} }
func (m *DistributedConfig) String() string { return proto.CompactTextString(m) }
func (*DistributedConfig) ProtoMessage()    {}
func (*DistributedConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_87968d26f3046c60, []int{4}
}

func (m *DistributedConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedConfig.Unmarshal(m, b)
}
func (m *DistributedConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedConfig.Marshal(b, m, deterministic)
}
func (m *DistributedConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedConfig.Merge(m, src)
}
func (m *DistributedConfig) XXX_Size() int {
	return xxx_messageInfo_DistributedConfig.Size(m)
}
func (m *DistributedConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedConfig proto.InternalMessageInfo

func (m *DistributedConfig) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DistributedConfig) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *DistributedConfig) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*Announcement)(nil), "Announcement")
	proto.RegisterType((*Route)(nil), "Route")
	proto.RegisterType((*Hop)(nil), "Hop")
	proto.RegisterType((*DistributedConfig)(nil), "DistributedConfig")
}

func init() { proto.RegisterFile("protocol/protocol.proto", fileDescriptor_87968d26f3046c60) }

var fileDescriptor_87968d26f3046c60 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xc1, 0x4e, 0xe3, 0x30,
	0x10, 0x86, 0x37, 0x4d, 0x9b, 0xee, 0x4e, 0xd3, 0x15, 0xf8, 0x00, 0x16, 0x07, 0x14, 0xc2, 0x25,
	0xa7, 0x14, 0x15, 0xf1, 0x00, 0x08, 0x0e, 0x45, 0x02, 0x09, 0xf9, 0xc0, 0x11, 0xe4, 0x26, 0xd3,
	0xd6, 0x52, 0x6a, 0x5b, 0xce, 0x04, 0xd1, 0xb7, 0x47, 0x71, 0x1d, 0xc4, 0xed, 0xff, 0x3e, 0xc9,
	0x33, 0x9a, 0xdf, 0x70, 0x6e, 0x9d, 0x21, 0x53, 0x99, 0x66, 0x31, 0x84, 0xd2, 0x87, 0xfc, 0x0e,
	0xa6, 0x2f, 0xd8, 0xb6, 0x72, 0x8b, 0xec, 0x04, 0x62, 0x92, 0x5b, 0x1e, 0x65, 0x51, 0x31, 0x17,
	0x7d, 0x64, 0x1c, 0xa6, 0x56, 0x1e, 0x1a, 0x23, 0x6b, 0x3e, 0xca, 0xa2, 0x22, 0x15, 0x03, 0xe6,
	0x25, 0xa4, 0xf7, 0x5a, 0x9b, 0x4e, 0x57, 0xb8, 0x47, 0x4d, 0xec, 0x12, 0x12, 0x67, 0x3a, 0xc2,
	0x96, 0x47, 0x59, 0x5c, 0xcc, 0x96, 0x49, 0x29, 0x7a, 0x14, 0xc1, 0xe6, 0xef, 0x30, 0xf1, 0x82,
	0x9d, 0x41, 0x62, 0x1d, 0x6e, 0xd4, 0x97, 0xdf, 0x93, 0x8a, 0x40, 0xec, 0x1a, 0xe6, 0xc7, 0xf4,
	0xd1, 0xa0, 0xde, 0xd2, 0xce, 0x2f, 0x9c, 0x8b, 0xf4, 0x28, 0x9f, 0xbd, 0x63, 0x1c, 0xc6, 0x56,
	0xd2, 0x8e, 0xc7, 0x7e, 0xc7, 0xb8, 0x5c, 0x19, 0x2b, 0xbc, 0xc9, 0x17, 0x10, 0xaf, 0x8c, 0x65,
	0xff, 0x61, 0xa4, 0xea, 0x30, 0x79, 0xa4, 0xea, 0xfe, 0x80, 0x46, 0x12, 0xea, 0xea, 0x10, 0xe6,
	0x0d, 0x98, 0x2b, 0x38, 0x7d, 0x54, 0x2d, 0x39, 0xb5, 0xee, 0x08, 0xeb, 0x07, 0xa3, 0x37, 0xca,
	0xdf, 0xfb, 0x89, 0xae, 0x55, 0x46, 0x87, 0x16, 0x06, 0x64, 0x19, 0xcc, 0x2a, 0x74, 0xa4, 0x36,
	0xaa, 0x92, 0x84, 0xa1, 0x8d, 0xdf, 0xaa, 0x7f, 0x5b, 0x19, 0x4d, 0xa8, 0x89, 0xc7, 0xc7, 0xae,
	0x02, 0x2e, 0x4b, 0xf8, 0xf7, 0xb6, 0xc7, 0x76, 0xf7, 0x8a, 0xe8, 0xd8, 0x15, 0x4c, 0x9e, 0xb4,
	0xed, 0x88, 0xfd, 0x2d, 0x43, 0xef, 0x17, 0x3f, 0x29, 0xff, 0x53, 0x44, 0x37, 0xd1, 0x3a, 0xf1,
	0x3f, 0x73, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x88, 0x17, 0xb5, 0xd7, 0xb4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VmeshPeerClient is the client API for VmeshPeer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VmeshPeerClient interface {
	Input(ctx context.Context, opts ...grpc.CallOption) (VmeshPeer_InputClient, error)
}

type vmeshPeerClient struct {
	cc *grpc.ClientConn
}

func NewVmeshPeerClient(cc *grpc.ClientConn) VmeshPeerClient {
	return &vmeshPeerClient{cc}
}

func (c *vmeshPeerClient) Input(ctx context.Context, opts ...grpc.CallOption) (VmeshPeer_InputClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VmeshPeer_serviceDesc.Streams[0], "/VmeshPeer/Input", opts...)
	if err != nil {
		return nil, err
	}
	x := &vmeshPeerInputClient{stream}
	return x, nil
}

type VmeshPeer_InputClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type vmeshPeerInputClient struct {
	grpc.ClientStream
}

func (x *vmeshPeerInputClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vmeshPeerInputClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VmeshPeerServer is the server API for VmeshPeer service.
type VmeshPeerServer interface {
	Input(VmeshPeer_InputServer) error
}

func RegisterVmeshPeerServer(s *grpc.Server, srv VmeshPeerServer) {
	s.RegisterService(&_VmeshPeer_serviceDesc, srv)
}

func _VmeshPeer_Input_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VmeshPeerServer).Input(&vmeshPeerInputServer{stream})
}

type VmeshPeer_InputServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type vmeshPeerInputServer struct {
	grpc.ServerStream
}

func (x *vmeshPeerInputServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vmeshPeerInputServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VmeshPeer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VmeshPeer",
	HandlerType: (*VmeshPeerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Input",
			Handler:       _VmeshPeer_Input_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocol/protocol.proto",
}
