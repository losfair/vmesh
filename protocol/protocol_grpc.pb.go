// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VnetPeerClient is the client API for VnetPeer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VnetPeerClient interface {
	Input(ctx context.Context, opts ...grpc.CallOption) (VnetPeer_InputClient, error)
}

type vnetPeerClient struct {
	cc grpc.ClientConnInterface
}

func NewVnetPeerClient(cc grpc.ClientConnInterface) VnetPeerClient {
	return &vnetPeerClient{cc}
}

func (c *vnetPeerClient) Input(ctx context.Context, opts ...grpc.CallOption) (VnetPeer_InputClient, error) {
	stream, err := c.cc.NewStream(ctx, &VnetPeer_ServiceDesc.Streams[0], "/VnetPeer/Input", opts...)
	if err != nil {
		return nil, err
	}
	x := &vnetPeerInputClient{stream}
	return x, nil
}

type VnetPeer_InputClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type vnetPeerInputClient struct {
	grpc.ClientStream
}

func (x *vnetPeerInputClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vnetPeerInputClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VnetPeerServer is the server API for VnetPeer service.
// All implementations must embed UnimplementedVnetPeerServer
// for forward compatibility
type VnetPeerServer interface {
	Input(VnetPeer_InputServer) error
	mustEmbedUnimplementedVnetPeerServer()
}

// UnimplementedVnetPeerServer must be embedded to have forward compatible implementations.
type UnimplementedVnetPeerServer struct {
}

func (UnimplementedVnetPeerServer) Input(VnetPeer_InputServer) error {
	return status.Errorf(codes.Unimplemented, "method Input not implemented")
}
func (UnimplementedVnetPeerServer) mustEmbedUnimplementedVnetPeerServer() {}

// UnsafeVnetPeerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VnetPeerServer will
// result in compilation errors.
type UnsafeVnetPeerServer interface {
	mustEmbedUnimplementedVnetPeerServer()
}

func RegisterVnetPeerServer(s grpc.ServiceRegistrar, srv VnetPeerServer) {
	s.RegisterService(&VnetPeer_ServiceDesc, srv)
}

func _VnetPeer_Input_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VnetPeerServer).Input(&vnetPeerInputServer{stream})
}

type VnetPeer_InputServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type vnetPeerInputServer struct {
	grpc.ServerStream
}

func (x *vnetPeerInputServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vnetPeerInputServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VnetPeer_ServiceDesc is the grpc.ServiceDesc for VnetPeer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VnetPeer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VnetPeer",
	HandlerType: (*VnetPeerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Input",
			Handler:       _VnetPeer_Input_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocol/protocol.proto",
}
